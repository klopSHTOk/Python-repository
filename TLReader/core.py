from aiogram import Bot
from aiogram import Dispatcher
from aiogram import executor
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup
from aiogram.dispatcher.filters.state import State
from aiogram.dispatcher.storage import FSMContext

import const # –º–æ–π –º–æ–¥—É–ª—å —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
import script # –º–æ–π –º–æ–¥—É–ª—å —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –∫–æ–¥–æ–º

bot = Bot(const.BOT_TOKEN)
memory = MemoryStorage()
dp = Dispatcher(bot, storage=memory)

class Form(StatesGroup): 
    reading = State()

@dp.message_handler(commands='start')
async def start(message: types.Message):
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
    await message.answer('–ü—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã <b>/read</b> –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.', parse_mode=types.ParseMode.HTML)

@dp.message_handler(commands=('read', 'r'), commands_prefix='!/')
async def save_data(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:')
    await Form.reading.set()

@dp.message_handler(state=Form.reading)
async def reader(message: types.Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy['read'] = message.text
        const.DATA.append(proxy['read'])
        await state.finish()
        await message.reply('–ü–æ–¥–æ–∂–¥–∏—Ç–µ...üïò')

        script.exact_process()
        await bot.send_message(message.chat.id, '‚úÖ –û–∑–≤—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
